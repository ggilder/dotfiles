function parse_svn_repository_root() {
  if [ -d ".svn" ]; then
    svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p'
  fi
}

function parse_svn_url() {
  if [ -d ".svn" ]; then
    svn info 2>/dev/null | sed -ne 's#^URL: ##p' | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | egrep -o '(tags|branches)/[^/]+|trunk' | egrep -o '[^/]+$' | awk '{print $1}'
  fi
}

function parse_svn_branch() {
  if [ -d ".svn" ]; then
    branch=`parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk '{print $1}'`
    if [ -n "${branch}" ]; then
      echo "$branch"
    else
      echo "none"
    fi
  fi
}

function parse_svn_dirty() {
  if [ -d ".svn" ]; then
    svn_stat=`svn status 2> /dev/null`
    modified=`  echo -n "${svn_stat}" 2> /dev/null | grep -q "M       " 2> /dev/null; echo "$?"`
    untracked=` echo -n "${svn_stat}" 2> /dev/null | grep -q "?       " 2> /dev/null; echo "$?"`
    newfile=`   echo -n "${svn_stat}" 2> /dev/null | grep -q "A       " 2> /dev/null; echo "$?"`
    conflict=`  echo -n "${svn_stat}" 2> /dev/null | grep -q "C       " 2> /dev/null; echo "$?"`
    prop_con=`  echo -n "${svn_stat}" 2> /dev/null | grep -q " C      " 2> /dev/null; echo "$?"`
    deleted=`   echo -n "${svn_stat}" 2> /dev/null | grep -q "D       " 2> /dev/null; echo "$?"`
    replaced=`  echo -n "${svn_stat}" 2> /dev/null | grep -q "R       " 2> /dev/null; echo "$?"`
    missing=`   echo -n "${svn_stat}" 2> /dev/null | grep -q "!       " 2> /dev/null; echo "$?"`
    rem_lock=`  echo -n "${svn_stat}" 2> /dev/null | grep -q "  L     " 2> /dev/null; echo "$?"`
    local_lock=`echo -n "${svn_stat}" 2> /dev/null | grep -q "     K  " 2> /dev/null; echo "$?"`
    lock_del=`  echo -n "${svn_stat}" 2> /dev/null | grep -q "D    K  " 2> /dev/null; echo "$?"`
    switch=`    echo -n "${svn_stat}" 2> /dev/null | grep -q "    S   " 2> /dev/null; echo "$?"`
    changed=`   echo -n "${svn_stat}" 2> /dev/null | grep -q "~       " 2> /dev/null; echo "$?"`
    bits=""
    if [ "${modified}" -eq "0" ]; then
      bits="${bits}☭"
    fi
    if [ "${untracked}" -eq "0" ]; then
      bits="${bits}?"
    fi
    if [ "${newfile}" -eq "0" ]; then
      bits="${bits}*"
    fi
    if [ "${conflict}" -eq "0" ]; then
      bits="${bits}<<"
    fi
    if [ "${prop_con}" -eq "0" ]; then
      bits="${bits}>>"
    fi
    if [ "${deleted}" -eq "0" ]; then
      bits="${bits}D"
    fi
    if [ "${replaced}" -eq "0" ]; then
      bits="${bits}%"
    fi
    if [ "${missing}" -eq "0" ]; then
      bits="${bits}?"
    fi
    if [ "${rem_lock}" -eq "0" ]; then
      bits="${bits}RL"
    fi
    if [ "${local_lock}" -eq "0" ]; then
      bits="${bits}L"
    fi
    if [ "${lock_del}" -eq "0" ]; then
      bits="${bits}ÐL"
    fi
    if [ "${bits}" != "" ]; then
      bits=":${bits}"
    fi
    echo "${bits}"
  fi
}

function parse_git_dirty() {
  git_stat=`git status 2> /dev/null`
  dirty=`    echo -n "${git_stat}" | grep -q "Changes not staged"; echo "$?"`
  dirty2=`   echo -n "${git_stat}" | grep -q "Changed but not updated"; echo "$?"`
  untracked=`echo -n "${git_stat}" | grep -q "Untracked files"; echo "$?"`
  ahead=`    echo -n "${git_stat}" | grep -q "Your branch is ahead of"; echo "$?"`
  newfile=`  echo -n "${git_stat}" | grep -q "new file:"; echo "$?"`
  renamed=`  echo -n "${git_stat}" | grep -q "renamed:"; echo "$?"`
  staged=`   echo -n "${git_stat}" | grep -q "Changes to be committed:"; echo "$?"`
  bits=''
  if [ "${dirty}" -eq "0" ] || [ "${dirty2}" -eq "0" ]; then
    bits="${bits}☭"
  fi
  if [ "${untracked}" -eq "0" ]; then
    bits="${bits}?"
  fi
  if [ "${newfile}" -eq "0" ]; then
    bits="${bits}*"
  fi
  if [ "${ahead}" -eq "0" ]; then
    bits="${bits}+"
  fi
  if [ "${renamed}" -eq "0" ]; then
    bits="${bits}>"
  fi
  if [ "${staged}" -eq "0" ]; then
    bits="${bits}∆"
  fi
  echo "${bits}"
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/(\1$(parse_git_dirty))/"
}

function parse_git_svn_revision() {
  ref1=$(parse_git_branch)
  if [ -n "$ref1" ]; then
    echo "${ref1}"
  elif [ "`svnversion`" != "exported" ];then
    echo "(`parse_svn_branch``parse_svn_dirty`)"
  fi
}

function rvm-prompt-wrapper () {
  [ -e "$HOME/.rvm/bin/rvm-prompt" ] && echo "$($HOME/.rvm/bin/rvm-prompt i v p g s)"
}

function prompt_info(){
  local host='%{$terminfo[bold]$fg[cyan]%}%m%{$reset_color%}'
  local current_dir='%{$fg[green]%}${PWD/#$HOME/~}%{$reset_color%}'
  local rvm_ruby='%{$fg[red]%}$(rvm-prompt-wrapper)%{$reset_color%}'
  local scm='%{$fg[yellow]%}$(parse_git_svn_revision)%{$reset_color%}'
  echo "${host}:${current_dir} ${rvm_ruby} ${scm}
%{$fg[white]%}→%{$reset_color%} "
}
function rprompt_info(){
  local return_code="%(?..%{$fg[red]%}%?↵%{$reset_color%})"
  echo "%{$(echotc UP 1)%}${return_code}%{$(echotc DO 1)%}"
}

PROMPT="$(prompt_info)"
RPROMPT="$(rprompt_info)"
PS2='>'
PS3='?'
PS4='+'

function title() {
  print -Pn "\e]2;%~ - %n@%m\a"
}

# precmd is called just before the prompt is printed
function precmd() {
  title
}

# preexec is called just before any command line is executed
function preexec() {
  title
}
