# =============================
# = Directory save and recall =
# =============================

# I got the following from, and mod'd it: http://www.macosxhints.com/article.php?story=20020716005123797
#    The following aliases (save & show) are for saving frequently used directories
#    You can save a directory using an abbreviation of your choosing. Eg. save ms
#    You can subsequently move to one of the saved directories by using cd with
#    the abbreviation you chose. Eg. cd ms  (Note that no '$' is necessary.)
#    
#    Make sure to also set the appropriate shell option:
#    zsh:
#      setopt CDABLE_VARS
#    bash:
#      shopt -s cdable_vars

# if ~/.dirs file doesn't exist, create it
if [ ! -f ~/.dirs ]; then
  touch ~/.dirs
fi
# Initialization for the 'save' facility: source the .dirs file
source ~/.dirs

alias show='cat ~/.dirs'
alias showdirs="cat ~/.dirs | ruby -e \"puts STDIN.read.split(10.chr).sort.map{|x| x.gsub(/^(.+)=.+$/, '\\1')}.join(', ')\""

function save (){
  local usage
  usage="Usage: save shortcut_name"
  if [ $# -lt 1 ]; then
    echo "$usage"
    return 1
  fi
  if [ $# -gt 1 ]; then
    echo "Too many arguments!"
    echo "$usage"
    return 1
  fi
  if [ -z $(echo $@ | grep --color=never "^[a-zA-Z]\w*$") ]; then
    echo "Bad argument! $@ is not a valid alias!"
    return 1
  fi
  if [ $(cat ~/.dirs | grep --color=never "^$@=" | wc -l) -gt 0 ]; then
    echo -n "That alias is already set to: "
    echo $(cat ~/.dirs | awk "/^$@=/" | sed "s/^$@=//" | tail -1)
    read -p "Do you want to overwrite it? (y/n) " answer
    if [ ! "$answer" == "y" -a ! "$answer" == "yes" ]; then
      return 0
    else
      # backup just in case
      cp ~/.dirs ~/.dirs.bak
      # delete existing version(s) of this alias
      cat ~/.dirs | sed "s/^$@=.*//" | sed '/^$/d' > ~/.dirs.tmp
      mv ~/.dirs.tmp ~/.dirs
    fi
  fi
  echo "$@"=\"`pwd`\" >> ~/.dirs
  source ~/.dirs
  echo "Directory shortcuts:" `showdirs`
}

# show dirs at login
echo "Directory shortcuts:" `showdirs`

#### Functions to inspect ruby gems ###########################
function gemdir {
  local GEMPATHS
  GEMPATHS=`gem environment gempaths | tr ':' '\n'`
  echo "$GEMPATHS" | xargs -n 1 -I %s find %s/gems -type d -depth 1 | grep $1 | sort | tail -1
}
# really awesome function, use: cdgem <gem name>, cd's into your gems
# directory and opens gem that best matches the gem name provided
function cdgem {
  local GEMDIR
  GEMDIR=$(gemdir $1)
  if [ "$GEMDIR" ] && [ -d "$GEMDIR" ]; then
    cd $GEMDIR
  else
    echo "No gem found for $1 in:\n$GEMPATHS"
    return 1
  fi
}
function mategem {
  (cdgem $1 && mate .)
}

######## misc ##########

# update dotfiles
function dotfiles_update {
  local SAVED_PWD
  SAVED_PWD="$PWD"
  cd $HOME/src/dotfiles
  git pull --ff-only
  git submodule init
  git submodule update
  rake install
  cd "$SAVED_PWD"
}

# mkdir, cd into it
mkcd () {
  mkdir -p "$*"
  cd "$*"
}

# Trash files
function trash () {
  local dir
  for dir in "$@"; do
    # ignore any arguments
    if [[ "$dir" = -* ]]; then :
    else
      local dst=${dir##*/}
      # append the time if necessary
      while [ -e ~/.Trash/"$dst" ]; do
        dst="$dst "$(date +%H-%M-%S)
      done
      mv "$dir" ~/.Trash/"$dst"
    fi
  done
}

function copypath () {
  echo -n $PWD | pbcopy
}