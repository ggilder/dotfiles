# =============================
# = Directory save and recall =
# =============================

# I got the following from, and mod'd it: http://www.macosxhints.com/article.php?story=20020716005123797
#    The following aliases (save & show) are for saving frequently used directories
#    You can save a directory using an abbreviation of your choosing. Eg. save ms
#    You can subsequently move to one of the saved directories by using cd with
#    the abbreviation you chose. Eg. cd ms  (Note that no '$' is necessary.)
#    
#    Make sure to also set the appropriate shell option:
#    zsh:
#      setopt CDABLE_VARS
#    bash:
#      shopt -s cdable_vars

# if ~/.dirs file doesn't exist, create it
if [ ! -f ~/.dirs ]; then
  touch ~/.dirs
fi
# Initialization for the 'save' facility: source the .dirs file
source ~/.dirs

alias show='cat ~/.dirs'
alias showdirs="cat ~/.dirs | ruby -e \"puts STDIN.read.split(10.chr).sort.map{|x| x.gsub(/^(.+)=.+$/, '\\1')}.join(', ')\""

function save (){
  local usage
  usage="Usage: save shortcut_name"
  if [ $# -lt 1 ]; then
    echo "$usage"
    return 1
  fi
  if [ $# -gt 1 ]; then
    echo "Too many arguments!"
    echo "$usage"
    return 1
  fi
  if [ -z $(echo $@ | grep --color=never "^[a-zA-Z]\w*$") ]; then
    echo "Bad argument! $@ is not a valid alias!"
    return 1
  fi
  if [ $(cat ~/.dirs | grep --color=never "^$@=" | wc -l) -gt 0 ]; then
    echo -n "That alias is already set to: "
    echo $(cat ~/.dirs | awk "/^$@=/" | sed "s/^$@=//" | tail -1)
    echo -n "Do you want to overwrite it? (y/n) "
    read answer
    if [ ! "$answer" = "y" -a ! "$answer" = "yes" ]; then
      return 0
    else
      # backup just in case
      cp ~/.dirs ~/.dirs.bak
      # delete existing version(s) of this alias
      cat ~/.dirs | sed "/^$@=.*/d" > ~/.dirs.tmp
      mv ~/.dirs.tmp ~/.dirs
    fi
  fi
  # add a newline to the end of the file if necessary
  if [ $(cat ~/.dirs | sed -n '/.*/p' | wc -l) -gt $(cat ~/.dirs | wc -l) ]; then
    echo >> ~/.dirs
  fi
  echo "$@"=\"`pwd`\" >> ~/.dirs
  source ~/.dirs
  echo "Directory shortcuts:" `showdirs`
}

# show dirs at login
echo "Directory shortcuts:" `showdirs`

#### Functions to inspect ruby gems ###########################
## removed old `gemdir` function in favor of a ruby script, see bin/gemdir ##
function cdgem {
  local GEMDIR
  GEMDIR=$(gemdir $1)
  if [ "$GEMDIR" ] && [ -d "$GEMDIR" ]; then
    cd $GEMDIR
  else
    echo "No gem found for $1"
    return 1
  fi
}
function mategem {
  (cdgem $1 && mate .)
}

# Hitch

hitch() {
command hitch "$@"
if [[ -s "$HOME/.hitch_export_authors" ]] ; then source "$HOME/.hitch_export_authors" ; fi
}
alias unhitch='hitch -u'
# Uncomment to persist pair info between terminal instances
# hitch


######## misc ##########

# update dotfiles
function dotfiles_update {
  local SAVED_PWD
  SAVED_PWD="$PWD"
  cd $HOME/src/dotfiles
  git pull --ff-only
  git submodule update --init
  rake install
  cd "$SAVED_PWD"
}

# mkdir, cd into it
mkcd () {
  mkdir -p "$*"
  cd "$*"
}

# Trash files
function trash () {
  local dir
  for dir in "$@"; do
    # ignore any arguments
    if [[ "$dir" = -* ]]; then :
    else
      local dst=${dir##*/}
      # append the time if necessary
      while [ -e ~/.Trash/"$dst" ]; do
        dst="$dst "$(date +%H-%M-%S)
      done
      mv "$dir" ~/.Trash/"$dst"
    fi
  done
}

function copypath () {
  echo -n $PWD | pbcopy
}

# project rvmrc files
function rvmrc () {
  if [ $# -lt 1 ]; then
    echo "Trusting existing .rvmrc file"
    rvm rvmrc trust && rvm rvmrc load
  else
    echo "Creating new .rvmrc file"
    cmd="rvm --rvmrc --create use $1 && rvm rvmrc trust"
    echo "running: $cmd"
    eval $cmd
  fi
}

function newest () {
  if [ $# -lt 1 ]; then
    ls -1t | head -n 5 | nl
    echo 'Type `newest #` to open that file.'
  else
    open "$(ls -1t | head -n $1 | tail -n 1)"
  fi
}

# build html from markdown, optimized for legibility on mobile devices
function mdbuild () {
  for input in "$@"; do
    out=${input%.*}.html
    mdgenerate $input > $out
  done
}

function mdpreview () {
  for file in "$@"; do
    local TMPFILE=`mktemp -t mdpreview` || exit 1
    mv $TMPFILE $TMPFILE.html
    mdgenerate $file "$PWD/" > $TMPFILE.html
    open $TMPFILE.html
  done
}

function mdgenerate () {
  read -d '' head <<"EOF"
<!DOCTYPE html>
<html>
<head>
  <meta http-equiv=Content-type content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width">
  <title></title>
  <style>body{font-family:Helvetica;margin:2em;}</style>
EOF
  head="$head\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"$2style.css\">\n</head>\n<body>"
  local foot="</body>\n</html>\n"
  echo $head
  markdown "$1" | smartypants
  echo $foot
}

# convert tabs to spaces
function tabs2spaces () {
  if [ $# -lt 1 ]; then
    echo "No files provided!"
    return 1
  fi
  for file in "$@"; do
    echo "converting $file"
    cp $file $file.tmp && expand -t 2 $file > $file.tmp && mv $file.tmp $file
  done
}

# kill processes
function pskill () {
  if [ $# -lt 1 ]; then
    echo "No grep string provided!"
    return 1
  fi
  psgrep "$*" | tail -n +2 | sed 's/  */ /g' | cut -d ' ' -f 2 | xargs kill -9
}

# run a command multiple times
function dotimes () {
  if [[ $# -lt 2 ]]; then
    echo "usage: dotimes number-of-times command-to-run"
    return 1
  fi
  local max=$1
  local i=0
  local fails=0
  shift
  while [ $i -lt $max ]; do
    i=`expr $i + 1`
    $@
    echo -n "\n#### "
    if [[ $? -gt 0 ]]; then
      echo -n "FAILED"
      fails=`expr $fails + 1`
    else
      echo -n "PASSED"
    fi
    echo -n " ($i/$max, $fails fails)"
    echo -n " ####\n\n"
  done
  echo "\n\n#### $fails out of $max runs failed. ####\n"
}

# RVM info

function rvm-prompt-wrapper () {
  [ -e "$HOME/.rvm/bin/rvm-prompt" ] && echo "$($HOME/.rvm/bin/rvm-prompt i v p g s)"
}

######################################
# Consolidated Git prompt functions
######################################

function parse_git_dirty() {
  git_stat=`git status 2> /dev/null`
  dirty=`    echo -n "${git_stat}" | grep -q "Changes not staged"; echo "$?"`
  dirty2=`   echo -n "${git_stat}" | grep -q "Changed but not updated"; echo "$?"`
  untracked=`echo -n "${git_stat}" | grep -q "Untracked files"; echo "$?"`
  ahead=`    echo -n "${git_stat}" | grep -q "Your branch is ahead of"; echo "$?"`
  newfile=`  echo -n "${git_stat}" | grep -q "new file:"; echo "$?"`
  renamed=`  echo -n "${git_stat}" | grep -q "renamed:"; echo "$?"`
  staged=`   echo -n "${git_stat}" | grep -q "Changes to be committed:"; echo "$?"`
  bits=''
  if [ "${dirty}" -eq "0" ] || [ "${dirty2}" -eq "0" ]; then
    bits="${bits}☭"
  fi
  if [ "${untracked}" -eq "0" ]; then
    bits="${bits}?"
  fi
  if [ "${newfile}" -eq "0" ]; then
    bits="${bits}*"
  fi
  if [ "${ahead}" -eq "0" ]; then
    bits="${bits}+"
  fi
  if [ "${renamed}" -eq "0" ]; then
    bits="${bits}>"
  fi
  if [ "${staged}" -eq "0" ]; then
    bits="${bits}∆"
  fi
  echo "${bits}"
}

function parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/(\1$(parse_git_dirty))/"
}

function parse_git_revision() {
  ref1=$(parse_git_branch)
  if [ -n "$ref1" ]; then
    echo "${ref1}"
  fi
}

function tmux-set-window-name() {
  if [[ -n "$TMUX" ]]; then
    if [[ -n "$1" ]]; then
      local window_name="$1"
    else
      local window_name="$(basename $PWD)"
    fi
    pane=$(tmux list-panes -a | grep "$TMUX_PANE" | sed 's/[0-9]*:\([0-9]*\).*/\1/')
    tmux rename-window -t $pane "$window_name"
  fi
}
