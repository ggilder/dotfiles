#!/usr/bin/env ruby

require 'fileutils'
require 'open3'
require 'time'

USAGE = <<EOD
rename-with-mod-time [--dry-run] [--latest] PATH...

PATH may be repeated. Each path will be renamed to prepend its modification
time (in the format YYYY-MM-DD) unless the name is already prepended.

--dry-run     Prints the actions to be taken without performing them.
--latest      Uses the latest enclosed mod time (rather than default earliest)
              when renaming folders.
--creation    Rename using creation time rather than mod time.
--help, -h    Prints this help.
EOD

DATE_PATTERN = /^\d{4}-\d{1,2}(-\d{1,2})?\b/
YEAR_RANGE_PATTERN = /^\d{4}-\d{4}\b/
SECONDS_PER_DAY = 60 * 60 * 24
SECONDS_PER_MONTH = 30.44 * SECONDS_PER_DAY
SECONDS_PER_YEAR = 12 * SECONDS_PER_MONTH

if ARGV.delete('--help') || ARGV.delete('-h')
  puts USAGE
  exit
end

dry_run = ARGV.delete('--dry-run')
use_latest = ARGV.delete('--latest')
use_creation = ARGV.delete('--creation')

paths = ARGV

puts "Renaming #{paths.count} files..."
puts "Using creation time" if use_creation
puts "DRY RUN, no renaming will take place" if dry_run

def delta_description(delta)
  return "" unless delta

  if delta > SECONDS_PER_YEAR
    formatted_delta = (delta / SECONDS_PER_YEAR).round(1)
    unit = "years"
    flag = "🛑"
  elsif delta > SECONDS_PER_MONTH
    formatted_delta = (delta / SECONDS_PER_MONTH).round(1)
    unit = "months"
    flag = "⚠️" if formatted_delta > 3
  else
    formatted_delta = (delta / SECONDS_PER_DAY).round
    unit = "days"
  end

  flag = " #{flag}" if flag
  return " (∆ #{formatted_delta} #{unit})#{flag}"
end

def get_times(files, use_creation: false)
  times = if use_creation
            files.map { |f| creation_time(f) }
          else
            files.map { |f| File.mtime(f) }
          end
  times.sort!
end

def creation_time(f)
  Time.parse(
    Open3.popen3(
      "stat",
      "-f",
      "%SB",
      f
    )[1].read.chomp
  )
end

paths.each do |path|
  name = File.basename(path)
  if name =~ DATE_PATTERN || name =~ YEAR_RANGE_PATTERN
    puts %{[INFO] "#{name}" already appears to include date; skipping.}
    next
  end
  if File.directory?(path)
    files = Dir[File.join(path, '**/*')].select { |f| File.file?(f) }
    times = get_times(files, use_creation: use_creation)
    time = use_latest ? times.last : times.first
    unless time
      puts %{[INFO] No contents found for "#{path}"; skipping.}
      next
    end
    delta = times.last - times.first
  else
    time = get_times([path], use_creation: use_creation).first
  end
  new_name = "#{time.strftime('%Y-%m-%d')} #{name}"
  new_path = File.join(File.dirname(path), new_name)
  if File.exist?(new_path)
    puts %{[ERROR] Destination "#{new_path}" already exists.}
  else
    puts %(Renaming "#{name}" to "#{new_name}"#{delta_description(delta)})
    unless dry_run
      FileUtils.mv(path, new_path, verbose: true)
    end
  end
end

puts "Done."
